---
title: "tinkering"
format: html
---

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
packages <- c("ggplot2", "haven", "dplyr", "tidycensus", "readr", "fastDummies")

for (pkg in packages) {
  if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
    install.packages(pkg, repos = "https://cran.rstudio.com/")
    library(pkg, character.only = TRUE)
  }
}

options(scipen = 10)
```

# Learning how to do stratified sampling

Stratify on race as a simple example

```{r}
sample <- df %>%
    group_by(race) %>%
    slice_sample(prop=0.2) # takes 1*prop of the rows.

sample$race %>% table() / nrow(sample)
```

```{r}
df$race %>% table() / nrow(df)
```

wow. okay. that's easy.

## More complex stratification

```{r}
cat_columns <- c("hispanic", "spm_poor", "mar", "sex", "education", "race", "region")
sample <- df %>%
    group_by(
        across(
            all_of(cat_columns)
        )
    ) %>%
    slice_sample(prop=0.2) %>%
    ungroup()
```

```{r}
# This code was generated by chatgpt. It's just for easily looking at proportions, nothing going into the report
# So I feel okay offloading that labor onto the stupid ai chatbot
for (col in cat_columns) {
  cat("\n", col, "\n", sep = "")
  
  # Compute proportions and convert to data frames
  prop_df <- as.data.frame(prop.table(table(df[[col]])))
  prop_sample <- as.data.frame(prop.table(table(sample[[col]])))
  
  # Name the columns clearly
  colnames(prop_df) <- c("value", "prop_df")
  colnames(prop_sample) <- c("value", "prop_sample")
  
  # Merge them
  comparison <- merge(prop_df, prop_sample, by = "value", all = TRUE)
  
  # Round only numeric columns
  comparison[, c("prop_df", "prop_sample")] <- round(comparison[, c("prop_df", "prop_sample")], 3)
  
  print(comparison)
}
```

Alright, this seems to work. We can use this to create a stratified sample! 

No sense in saving a new dataframe though. We'll set a seed in the final notebook and tinker w/ sample sizes in the modeling step. 

# Test Helper functions

```{r}
source("../scripts/helpers.R")
```

```{r}
cat_columns <- c("hispanic", "spm_poor", "mar", "sex", "education", "race", "region")
df <- readr::read_csv("../data/poverty_data.csv.gz") %>%
    add_state_abbreviations() %>%
    add_region() %>%
    apply_factor_labels() %>%
    select(-c(state, state_code, wt)) %>%
    stratified_sample(cat_columns = cat_columns, prop=0.05)
```

```{r}
df %>%
    modeldb::add_dummy_variables(region, auto_values = TRUE)
```

```{r}
factor_columns <- setdiff(cat_columns, c("hispanic", "spm_poor"))
df %>%
    fastDummies::dummy_cols(
        select_columns = factor_columns, 
        remove_selected_columns = TRUE,
        remove_first_dummy = TRUE
    )
```

